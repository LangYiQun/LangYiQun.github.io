<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1019-1021</title>
      <link href="/2023/10/19/1019-1021/"/>
      <url>/2023/10/19/1019-1021/</url>
      
        <content type="html"><![CDATA[<h1 id="10-18"><a href="#10-18" class="headerlink" title="10.18"></a>10.18</h1><p>在Ubuntu20.04系统上成功配置gem5模拟器，并根据官网的教程编译了第一个单核x86架构系统，并运行hello world负载。</p><h1 id="10-19"><a href="#10-19" class="headerlink" title="10.19"></a>10.19</h1><p>进一步学习官网教程，阅读bo’ke</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题和插件</title>
      <link href="/2023/10/18/hexo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/"/>
      <url>/2023/10/18/hexo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hexo主题"><a href="#1-Hexo主题" class="headerlink" title="1. Hexo主题"></a>1. Hexo主题</h1><p>hexo官方提供了很多的主题模板，可以在<a href="https://hexo.io/themes/index.html">hexo主题官网</a>中看到，<a href="https://hexo.io/zh-cn/docs/themes.html">官方教程</a>中也有配置主题操作</p><h2 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a><strong>Next主题</strong></h2><p>在众多主题中，Next是最受欢迎的主题之一，它提供了许多的界面模板，并且支持安装许多的插件。</p><h2 id="Next主题下载"><a href="#Next主题下载" class="headerlink" title="Next主题下载"></a><strong>Next主题下载</strong></h2><ol><li><p>$\color[RGB]{200, 100, 10}{下载}$。在git bash窗口中通过git clone即可下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载成功后，在<strong>blog&#x2F;themes</strong>文件夹下即可找到下载的next主题文件夹，其中包含了next主题的配置信息</p></li><li><p>$\color[RGB]{200, 100, 10}{修改Hexo主题}$。返回<strong>bolg根目录</strong>，打开**_config.yml 文件**，并将其中的theme项的值改为next</p></li></ol><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src=hexo主题和插件/image-20231019001323077.png>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #FFF;    padding: 2px;">hexo主题修改为next</div></center><p>经过以上两步，hexo的主题就成功更换为next啦！然后就通过hexo g重新生成博客，再通过hexo s 或 hexo d发布新的博客，看看新主题的样子。</p><hr><h1 id="2-Hexo常用插件"><a href="#2-Hexo常用插件" class="headerlink" title="2. Hexo常用插件"></a>2. Hexo常用插件</h1><h2 id="（1）插入数学公式"><a href="#（1）插入数学公式" class="headerlink" title="（1）插入数学公式"></a>（1）插入数学公式</h2><p>在用markdown写技术文档时，免不了会碰到数学公式。Next这种大主题也集成了渲染数学公式的功能</p><p>目前Next提供两种数学公式渲染引擎，分别是Mathjax和Katex。</p><p>可以在Next主题的配置文件_config.yml中看到这两个项</p><img src="/2023/10/18/hexo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/image-20231019132036641.png" class="" title="Next主题的配置文件_config.yml"><p>默认情况下两个引擎的enable使能选项均为false，只需要改为true就可以渲染数学公式了</p><p>其中every_page项置为true的时候，引擎会默认对每篇博客中的数学公式进行渲染，但对于不含数学公式的博客，加载速度会额外变慢；而当置为false是，只会对在开头处声明使用mathjax引擎的博客进行渲染。</p><img src="/2023/10/18/hexo%E4%B8%BB%E9%A2%98%E5%92%8C%E6%8F%92%E4%BB%B6/image-20231019145600478.png" class="" title="博客开头声明使用mathjax引擎"><p><strong>效果展示：</strong></p><ul><li><p>行内公式：</p><p>$f\left( x \right) &#x3D; \sum\limits_{i &#x3D; 1}^n {X_i^2} $</p><p>$MD\left(n_{i, j}, n_{x, y}\right)&#x3D;|i-x|+|j-y|$</p></li><li><p>行间公式：</p><p>$$f\left( x \right) &#x3D; \sum\limits_{i &#x3D; 1}^n {X_i^2} $$</p><p>$$MD\left(n_{i, j}, n_{x, y}\right)&#x3D;|i-x|+|j-y|$$</p></li></ul><p>（2）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu虚拟机</title>
      <link href="/2023/10/17/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2023/10/17/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu20-04-iso镜像国内阿里源下载"><a href="#Ubuntu20-04-iso镜像国内阿里源下载" class="headerlink" title="Ubuntu20.04 iso镜像国内阿里源下载"></a>Ubuntu20.04 iso镜像国内阿里源下载</h1><p><a href="http://mirrors.aliyun.com/ubuntu-releases/20.04/">ubuntu-releases-20.04安装包下载_开源镜像站-阿里云 (aliyun.com)</a></p><h1 id="Ubuntu20-04更换清华源"><a href="#Ubuntu20-04更换清华源" class="headerlink" title="Ubuntu20.04更换清华源"></a>Ubuntu20.04更换清华源</h1><p>Ubuntu安装完之后进行更换为国内源可以让下载更新的的速度快一点。</p><p>以下是具体操作的博客</p><p><a href="https://www.cnblogs.com/Lxk0825/p/9520002.html">ubuntu 执行apt-get update报错Failed to fetch - Lxk- - 博客园 (cnblogs.com)</a></p><p>使用清华源，将以下代码输入&#x2F;etc&#x2F;apt&#x2F;sources.list文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Gem5模拟器学习</title>
      <link href="/2023/10/17/Gem5%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/10/17/Gem5%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Gem5模拟器简介"><a href="#一、Gem5模拟器简介" class="headerlink" title="一、Gem5模拟器简介"></a>一、Gem5模拟器简介</h1><p>gem5是一个开源、模块化的时钟精确的全系统模拟器，应用于计算机体系结构研究。该模拟器可以对CPU、存储系统、片上互连系统、I&#x2F;O等系统组件进行详细的建模，并通过修改不同组件的具体实现和各个组件的配置参数可以灵活配置不同的计算系统。</p><h2 id="1-1-模拟组件"><a href="#1-1-模拟组件" class="headerlink" title="1.1 模拟组件"></a>1.1 模拟组件</h2><ul><li><p><strong>$\color[RGB]{0,150,255}{多种ISA}$</strong> ：gem5支持常见的各种指令集：X86、ARM、RISCV、SPARC、POWER、MIPS。不同的指令集包含了每条指令执行的完整过程。当前gem5中可用于全系统模拟的ISA主要有ARM、X86和RISCV；</p></li><li><p><strong>$\color[RGB]{0,150,255}{多种CPU模型}$</strong> ：gem5支持4种CPU模型：Simple、In-Order、Out-of-Order(简称O3)和KVM。每种CPU的具体实现和ISA不关联，因此CPU模型和ISA间可以任意搭配以组成多种计算机系统；</p></li><li><p><strong>$\color[RGB]{0,150,255}{Port  Interface}$</strong> ：该组件的主要功能是将系统中各个组件通过端口进行连接，屏蔽不同架构硬件实现细节，简化不同组件间的连接方式并增强系统通用性；</p></li><li><p><strong>$\color[RGB]{0,150,255}{Cache模型}$</strong> ：在gem5中支持Ruby和Classic Cache两种模型。</p></li></ul><p>  （1）<strong>Ruby存储模型</strong>:用户可以自定义不同Cache一致性协议，并对片上网络(Network-of-Chip, NoC)进行了详细建模；</p><p>  （2）<strong>Classic存储模型</strong>: 支持硬编码的层次MOESI一致性协议</p><ul><li><strong>$\color[RGB]{0,150,255}{DRAM模型}$</strong> ：gem5中的DRAM模型是事件驱动的，支持多种市面上常见的DRAM，如DDR3、DDR4、DDR5、GDDR、HMC、HBM等。在gem5中，DRAM模型不是时钟精确的，但是可以和时钟精确的DRAM模拟器DRAMSim3结合使用，gem5中提供了和DRAMSim连接的接口；</li><li><strong>$\color[RGB]{0,150,255}{GPU模型}$</strong> ：其GPU模型基于AMD的Graphic Core Next(GCN),是一种基于计算的时钟级GPU，支持多种异构系统的计算应用程序，不支持图形应用程序。一般都使用AMD的APU模拟器(基于gem5)对GPU进行模拟；</li><li><strong>$\color[RGB]{0,150,255}{I&#x2F;O设备}$</strong> ：支持常见的磁盘控制器、PCI、Ethernet等等，是进行全系统模拟必不可少的系统组件；</li><li><strong>$\color[RGB]{0,150,255}{丰富的接口}$</strong>  ：虽然gem5模拟器功能全面、配置灵活，但是在对各个组件进行建模的过程中，考虑复杂性和实现等方面因素，并不是对所有系统组件进行详细建模，因此配置了多种其他体系结构模拟器的结构，如SST、SystemC、DRAMSys、DRAMSim。</li></ul><h2 id="1-2-模拟模式"><a href="#1-2-模拟模式" class="headerlink" title="1.2 模拟模式"></a>1.2 模拟模式</h2><p>gem5支持两种系统模拟方式，一种是System Call Emulation(SE)，也叫系统调用模拟模式；另一种是Full System Simuluation(FS)，也叫全系统模拟模式。</p><ul><li><p>系统调用模拟模式 System Call Emulation(SE)</p></li><li><p>全系统模拟模式 Full System Simuluation(FS)</p></li></ul><h1 id="二、Gem5安装"><a href="#二、Gem5安装" class="headerlink" title="二、Gem5安装"></a>二、Gem5安装</h1><h1 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h1><p><a href="https://www.gem5.org/">Gem5官网</a></p><p><a href="https://www.gem5.org/documentation/learning_gem5/introduction/">Gem5官方学习向导</a></p><p><a href="https://mp.weixin.qq.com/s/VoPI0jbAERg8VK98oVff4Q">gem5学习笔记一：模拟器安装与使用 (qq.com)</a></p><p><a href="https://www.terapines.com/post/767/">兆松科技研发的基于gem5的模拟器zemu</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Gem5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用语法</title>
      <link href="/2023/10/07/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/10/07/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>markdown是一种被广泛使用的轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，Markdown文件的后缀名是“.md”。</p><h1 id="修改文字颜色"><a href="#修改文字颜色" class="headerlink" title="修改文字颜色"></a>修改文字颜色</h1><p>默认字体颜色自然是黑色啦，想要修改字体颜色有两种方法</p><h2 id="1-html格式"><a href="#1-html格式" class="headerlink" title="1. html格式"></a>1. html格式</h2><h3 id="（1）英文单词指示颜色"><a href="#（1）英文单词指示颜色" class="headerlink" title="（1）英文单词指示颜色"></a>（1）英文单词指示颜色</h3><p>可以通过html的各种英文颜色名来使用颜色</p><p><a href="https://www.runoob.com/html/html-colornames.html">HTML 颜色名</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=&#x27;red&#x27;&gt;文本&lt;/font&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）RGB指示颜色"><a href="#（2）RGB指示颜色" class="headerlink" title="（2）RGB指示颜色"></a>（2）RGB指示颜色</h3><p>RGB颜色格式：$#RRGGBB$，RGB均用16进制数字表示</p><p>其中两个R代表了红色光，两个G代表了绿色光，两个B代表了蓝色光</p><p>如$#FF0000$代表了255份红色光，0份绿色光和0份蓝色光。</p><p><a href="http://www.yini.org/liuyan/rgbcolor.htm">RGB颜色表</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=#FF0000&gt;文本&lt;/font&gt;</span><br></pre></td></tr></table></figure><h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><p><font color='red'>我是红色</font></p><p><font color=#119966>我是#119966</font></p><h2 id="2-通过LaTeX内联公式"><a href="#2-通过LaTeX内联公式" class="headerlink" title="2. 通过LaTeX内联公式"></a>2. 通过LaTeX内联公式</h2><h3 id="（1）英文单词指示颜色-1"><a href="#（1）英文单词指示颜色-1" class="headerlink" title="（1）英文单词指示颜色"></a>（1）英文单词指示颜色</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$\textcolor&#123;Blue&#125;&#123;文本&#125;$</span><br><span class="line">或者简写为</span><br><span class="line">$\color&#123;Blue&#125;&#123;文本&#125;$</span><br></pre></td></tr></table></figure><p>$\color{Blue}{文本} \mu$</p><h3 id="（2）RGB指示颜色-1"><a href="#（2）RGB指示颜色-1" class="headerlink" title="（2）RGB指示颜色"></a>（2）RGB指示颜色</h3><p>有两种通过RGB指示颜色的语法：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$\textcolor[rgb]&#123;r,g,b&#125;&#123;文本&#125;$</span><br><span class="line">其中&#123;r,g,b&#125;代表red、green和blue三种颜色的组合，取值范围为[0-1]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$\textcolor[RGB]&#123;R,G,B&#125;&#123;文本&#125;$</span><br><span class="line">其中&#123;R,G,B&#125;代表red、green和blue三种颜色的组合，取值范围为[0-255]</span><br></pre></td></tr></table></figure><p>$$<br>\mu asdfasdfad \ \theta<br>$$</p><p>$\frac{1}{\omega}$</p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo上传图片</title>
      <link href="/2023/10/07/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2023/10/07/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>Hexo网站已经搭建好了，我们可以开始愉快地写博客了！</p><h2 id="1-Typora编辑器"><a href="#1-Typora编辑器" class="headerlink" title="1. Typora编辑器"></a>1. Typora编辑器</h2><p>Typora是一种markdown语言的常用编辑器，这个软件的方便之处在于可以直接将markdown语法呈现出其效果，并且集成了许多有用的工具，是编辑markdown的不二之选。</p><p><a href="https://typora.io/">Typora官网</a></p><hr><h2 id="2-Hexo插入本地图片遇到的问题"><a href="#2-Hexo插入本地图片遇到的问题" class="headerlink" title="2. Hexo插入本地图片遇到的问题"></a>2. Hexo插入本地图片遇到的问题</h2><p>markdown的图片插入语法为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](图片路径)</span><br></pre></td></tr></table></figure><p>如果使用Typora，可以直接将图片复制粘贴在想要放置的位置，十分方便</p><p>当我们将图片直接复制到Typora中时，会出现图片可以在markdown中显示，但却无法在网页中显示的问题。</p><span id="more"></span><p><img src="/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231007210728956.png" alt="图一：Typora视角"></p><p><img src="/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231007210809543.png" alt="图二：网页视角"></p><hr><h2 id="3-将本地图片上传至Github"><a href="#3-将本地图片上传至Github" class="headerlink" title="3. 将本地图片上传至Github"></a>3. 将本地图片上传至Github</h2><p>这其实很好理解，因为使用的图片还在你的本地，markdown语法也使用的是本地路径（如图三），而静态网页不可能在你电脑本地找图片，所以需要我们将图片也一起上传。</p><p><img src="/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231007205825905.png" alt="图三：我从微信直接复制粘贴到Typora的一张图片"></p><p>上传图片等资源十分简单，只需要在Hexo的配置文件_config.yml里将post_asset_folder这一个选项配置从false更改为true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>于是每当你新建一个博客时，Hexo会自动在相同目录建立一个同名的资源文件夹，只需要将图片放到资源文件夹中，然会在markdown中通过相对路径找到图片就可以啦！</p><p>然而，每次在博客中添加图片还要手动放到资源文件夹中，然后再用语法![]()去描述图片，实在是麻烦！</p><p>好在我们可以使用Typora中的工具，依次在Typora中进入文件-&gt;偏好设置-&gt;图像，然后在插入图片时选择复制到指定路径，也就是那个在同目录下同名的资源文件夹.&#x2F;&amp;{filename}，并勾选</p><ul><li><p>对本地位置的图片应用上述规则</p></li><li><p>对网络位置的图片应用上述规则</p></li><li><p>优先使用相对路径</p></li></ul><p>建议都勾选上，至少要勾选上第一项</p><p><img src="/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231007211935125.png" alt="图四"></p><img src="/2023/10/07/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231007212121607.png" class="" title="图五"><p>于是，复制粘贴过来的图片就可以自动保存在资源文件夹中，并且也自动将图片路径指向了资源文件夹中的这张图片，真方便！</p><img src="/2023/10/07/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231007212607249.png" class="" title="图六"><img src="/2023/10/07/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231007212643086.png" class="" title="图七"><p>当我满心欢喜地将博客部署到Github上时，却发现还是和图二一样没法显示</p><p>这是问什么呢？！</p><hr><h2 id="4-Hexo显示图像语法"><a href="#4-Hexo显示图像语法" class="headerlink" title="4. Hexo显示图像语法"></a>4. Hexo显示图像语法</h2><p>翻阅Hexo<a href="https://hexo.io/zh-cn/docs/asset-folders#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%BC%95%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6">官方教程之后</a>，才发现Hexo并不可以直接将markdown显示图片的![]()语法在网页中显示图片，而必须使用以下图像标签插件来插入图片，否则图片会路径错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>在markdown中编辑如下代码之后，卡比终于能在网页上出现了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img c0229a294ce2c67e2ba3d44298fcb98.jpg [我正在学习，请不要打扰] %&#125;</span><br></pre></td></tr></table></figure><img src="/2023/10/07/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231008110447546.png" class="" title="图八：使用Hexo插入图片语法——在页面中的视角"><p>然而，这种插入图片的Hexo语法不仅较为繁琐，而且在编辑的时候还不可以在编辑器里即时查看图片，这十分不方便。。</p><img src="/2023/10/07/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231008110647937.png" class="" title="图九：使用Hexo插入图片语法——在编辑器中的视角"><p>至此，我们现在有了两种都不完美的插入图片的方法</p><ol><li>使用markdown语法，好处是可以很方便地插入图片，而且可以享受实时预览图片，但坏处是根本因为路径问题无法在网页显示图片。</li><li>使用Hexo语法，可以在网页显示图片，但每插入一张图片需要手动编辑图片代码，还要手动把图片放进资源文件夹，还不能实时预览。</li></ol><p>既然如此，我们可不可以将两种方法结合起来，实现无痛插入图片的梦想？</p><p>使用Hexo的插件就可以实现！</p><hr><h2 id="5-Hexo插件实现无痛插入图片"><a href="#5-Hexo插件实现无痛插入图片" class="headerlink" title="5. Hexo插件实现无痛插入图片"></a>5. Hexo插件实现无痛插入图片</h2><p><a href="https://github.com/xcodebuild/hexo-asset-image">hexo-asset-img</a>插件可以在文章编译为html之前，自动地将markdown的图片语法自动转换成Hexo的图片语法，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![example](blogname/example.jpg) --&gt; &#123;% asset_img example.jpg example %&#125;</span><br></pre></td></tr></table></figure><p>hexo-asset-img的安装命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>ps.或者可以使用以下命令安装，安装后删除node_modules文件夹中的hexo-asset-image文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><p>pps.有不少教程安装了 hexo-asset-image 包，但我电脑上不行，踩了一天坑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装好插件后，还需要在Hexo的配置文件_config.yml里加入两个配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>如此，就可以在网页上看到插入的图片了！</p><img src="/2023/10/07/Hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/image-20231008123837571.png" class="" title="图十：博客中插入本地图片效果图"><hr><h2 id="6-全部步骤"><a href="#6-全部步骤" class="headerlink" title="6. 全部步骤"></a>6. 全部步骤</h2><ol><li><p>安装Typora编辑器</p></li><li><p>在Typora中进入文件-&gt;偏好设置-&gt;图像，在插入图片时选择复制到指定路径，也就是那个在同目录下同名的资源文件夹.&#x2F;&amp;{filename}，并勾选</p><ul><li><p>对本地位置的图片应用上述规则</p></li><li><p>对网络位置的图片应用上述规则</p></li><li><p>优先使用相对路径</p></li></ul></li><li><p>通过以下命令安装插件hexo-asset-img</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>在Hexo的配置文件_config.yml里将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>这个配置项由false改为ture</p><p>并加入以下两个配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="7-最终效果"><a href="#7-最终效果" class="headerlink" title="7. 最终效果"></a>7. 最终效果</h2><p>经过以上操作，我们以后就在Hexo博客中很方便地插入本地图片啦。</p><p>只需要将图片直接复制粘贴到Typora编辑器中，图片就会自动保存在资源文件夹中，并通过正确的路径保存，同时还可以支持编辑过程中的实时预览！</p><p>ps：有对于图片如何添加题注感兴趣的小伙伴可以看这篇博客</p><p><a href="https://blog.csdn.net/Lincain/article/details/89892249">Markdown 图片居中并添加标题_markdown图片标题-CSDN博客</a></p><p>参考链接🔗：</p><ul><li><p><a href="https://moeci.com/posts/hexo-typora/">Hexo + Typora + 开发Hexo插件 解决图片路径不一致 | yiyun’s Blog (moeci.com)</a></p></li><li><p><a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">hexo中完美插入本地图片 | ETRD</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹 | Hexo</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 插入图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置</title>
      <link href="/2023/10/05/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/10/05/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ifconfig（Linux）-ipconfig（windows）"><a href="#1-ifconfig（Linux）-ipconfig（windows）" class="headerlink" title="1. ifconfig（Linux） &#x2F; ipconfig（windows）"></a>1. ifconfig（Linux） &#x2F; ipconfig（windows）</h2><p>作用：用于查看网卡配置信息</p><p>如IPV4地址、IPV6地址、工作状态、网络类型</p><p>参考博客：<a href="https://blog.csdn.net/l_liangkk/article/details/114959914">查看网卡信息：ifconfig命令及详细介绍_ifconfig ether_-纸短情长的博客-CSDN博客</a> </p><p><img src="/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20231007104602303.png" alt="image-20231007104602303"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo网站搭建教程</title>
      <link href="/2023/09/26/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2023/09/26/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果</p><p>你也可以像我一样</p><p>拥有一篇属于你自己的Hexo框架博客网站</p><p>那我觉得</p><p>这件事情</p><p>泰酷辣！！！！！！！！！</p><p><img src="/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/1684920495319.png" alt="泰裤辣"></p></blockquote><hr><p>这是一个手把手教你如何搭建一个属于你自己的Hexo框架博客网站的教程</p><hr><h2 id="第一节-Hexo简介"><a href="#第一节-Hexo简介" class="headerlink" title="第一节  Hexo简介"></a>第一节  Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，Hexo 使用 <a href="https://link.zhihu.com/?target=http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，可以方便地生成静态网页，并托管在GitHub和Gitee上，是搭建博客的首选框架，让你实现在不用购买云服务器的情况下拥有一个属于自己的博客网站的梦想。</p><span id="more"></span><hr><h2 id="第二节-前期准备"><a href="#第二节-前期准备" class="headerlink" title="第二节 前期准备"></a>第二节 前期准备</h2><p>在安装Hexo之前，需要安装Node.js</p><p>进一步想要将Hexo部署到Github或Gitee上，还必须通过Git</p><h3 id="2-1-安装Node-js"><a href="#2-1-安装Node-js" class="headerlink" title="2.1 安装Node.js"></a>2.1 安装Node.js</h3><ul><li>Windows：</li></ul><p>在官网下载LTS版本（下载nodejs自带npm）</p><p><img src="/Hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/image-20231003193554011.png" alt="image-20231003193554011"></p><p>官网下载地址：<a href="https://nodejs.org/en">Node.js (nodejs.org)</a></p><ul><li>Linux</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>安装成功验证：</p><p>在命令行中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>能够顺利输出node和npm的版本号即可</p><h3 id="2-2-安装git"><a href="#2-2-安装git" class="headerlink" title="2.2 安装git"></a>2.2 安装git</h3><ul><li><p>Windows</p><p>点击Git官网下载安装包，然后按Wizard安装即可</p></li></ul><ul><li><p>Linux (Ubuntu, Debian)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core</span><br></pre></td></tr></table></figure></li><li><p>Linux (Fedora, Red Hat, CentOS)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git-core</span><br></pre></td></tr></table></figure></li></ul><p>git -v查看版本，验证是否安装成功</p><h3 id="2-3-安装Hexo"><a href="#2-3-安装Hexo" class="headerlink" title="2.3 安装Hexo"></a>2.3 安装Hexo</h3><p>通过npm可以直接安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>hexo -v查看版本，验证是否安装成功</p><hr><h2 id="第三节-搭建本地静态博客"><a href="#第三节-搭建本地静态博客" class="headerlink" title="第三节 搭建本地静态博客"></a>第三节 搭建本地静态博客</h2><h3 id="3-1-初始化Hexo博客框架"><a href="#3-1-初始化Hexo博客框架" class="headerlink" title="3.1  初始化Hexo博客框架"></a>3.1  初始化Hexo博客框架</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-进入新建的文件夹，安装一下npm"><a href="#3-2-进入新建的文件夹，安装一下npm" class="headerlink" title="3.2  进入新建的文件夹，安装一下npm"></a>3.2  进入新建的文件夹，安装一下npm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li><p>npm install 更新可能会较慢，如果失败，可以尝试配置npm代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//  配置nmp代理来提高速度，如设置淘宝镜像</span><br><span class="line">npm config set registry https://registry.npm.taobao.org </span><br><span class="line"></span><br><span class="line">// 查看配置是否成功</span><br><span class="line">npm config get registry </span><br><span class="line"></span><br><span class="line">// 成功后重新npm install安装</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ul><p>进入文件夹后，目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><p><strong>package.json</strong></p><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> 渲染引擎 已默认安装，您可以自由移除。</p><p><strong>scaffolds</strong></p><p><a href="https://hexo.io/zh-cn/docs/writing#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来创建文件。</p><p>Hexo 的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改 <code>scaffold/post.md</code> 中的 Front-matter 内容，那么每次新建一篇文章时都会包含这个修改。</p><p><strong>source</strong></p><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><p><strong>themes</strong></p><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h3 id="3-3-生成静态博客网站"><a href="#3-3-生成静态博客网站" class="headerlink" title="3.3  生成静态博客网站"></a>3.3  生成静态博客网站</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h3 id="3-4-启动服务器"><a href="#3-4-启动服务器" class="headerlink" title="3.4  启动服务器"></a>3.4  启动服务器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>默认情况下，访问网址为：<a href="http://localhost:4000/%EF%BC%8C%E8%AE%BF%E9%97%AE%E8%BF%99%E4%B8%AA%E6%9C%AC%E5%9C%B0%E7%BD%91%E5%9D%80%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%87%AA%E5%B7%B1%E7%94%9F%E6%88%90%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99">http://localhost:4000/，访问这个本地网址就可以看到自己生成的博客网站</a></p><hr><h2 id="第四节-将博客部署到Github"><a href="#第四节-将博客部署到Github" class="headerlink" title="第四节 将博客部署到Github"></a>第四节 将博客部署到Github</h2><p>生成的博客网站只能在自己电脑本地访问当然没意思，所以接下来看看如何把写好的博客部署到Github Pages上。</p><h5 id="GitHub-Pages-是什么"><a href="#GitHub-Pages-是什么" class="headerlink" title="GitHub Pages 是什么?"></a>GitHub Pages 是什么?</h5><ul><li><a href="https://link.zhihu.com/?target=https://help.github.com/en/articles/what-is-github-pages">What is GitHub Pages? - GitHub Help</a></li></ul><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h5 id="Hexo-Github-Pages-发布博客原理"><a href="#Hexo-Github-Pages-发布博客原理" class="headerlink" title="Hexo + Github Pages 发布博客原理"></a>Hexo + Github Pages 发布博客原理</h5><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><p>下面看看怎么实现</p><h3 id="4-1-Github创建个人仓库"><a href="#4-1-Github创建个人仓库" class="headerlink" title="4.1 Github创建个人仓库"></a>4.1 Github创建个人仓库</h3><p>点击New repository，开始新建仓库</p><p>新仓库的名字有固定格式要求，否组无法建站</p><p>格式为：用户名 + .github.oi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repository name eg.     yourusername.github.oi</span><br></pre></td></tr></table></figure><h3 id="4-2-安装hexo上传插件"><a href="#4-2-安装hexo上传插件" class="headerlink" title="4.2 安装hexo上传插件"></a>4.2 安装hexo上传插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="4-3-修改hexo配置文件指定仓库路径"><a href="#4-3-修改hexo配置文件指定仓库路径" class="headerlink" title="4.3 修改hexo配置文件指定仓库路径"></a>4.3 修改hexo配置文件指定仓库路径</h3><p>打开文件夹中的_config.yml文件，在文件最下面的Deployment部分修改配置</p><ol><li>type项填入”git”</li><li>repo项填入你的仓库的https或者ssh地址（点开仓库主页那个绿色的Code就能看到）</li><li>branch项填入你的仓库的分支名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line"> type: git</span><br><span class="line"> repo: 你的仓库的https或者ssh地址</span><br><span class="line"> branch: &lt;你的仓库的分支名&gt;</span><br></pre></td></tr></table></figure><h3 id="4-4-部署博客到Github"><a href="#4-4-部署博客到Github" class="headerlink" title="4.4 部署博客到Github"></a>4.4 部署博客到Github</h3><p>部署命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署完成后，可以在仓库主页的Deployment</p><hr><h2 id="第五节-常用命令"><a href="#第五节-常用命令" class="headerlink" title="第五节 常用命令"></a>第五节 常用命令</h2><h3 id="new"><a href="#new" class="headerlink" title="new"></a><font color=#0080ff>new</font></h3><p>新建一个博客。执行以下命令后，会在blog&#x2F;source&#x2F;_posts&#x2F;文件夹中新建一个同名的博客文件（.md格式）。通过设置tags字段还可以给这个文章添加标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;博客名称&quot;</span><br></pre></td></tr></table></figure><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a><font color=#0080ff>clean</font></h3><p>清除缓存文件（db.json）和已经生成的静态博客文件（public文件夹下的内容）.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a><font color=#0080ff>generate</font></h3><p>生成静态博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">简写为:hexo g</span><br></pre></td></tr></table></figure><p><font color=#0080ff>server</font></p><p>启动本地的博客服务器。默认情况下，访问网址为：<code>http://localhost:4000/</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">简写为:hexo s</span><br></pre></td></tr></table></figure><p><font color=#0080ff>deploy</font></p><p>在相应的网站服务器（一般是Github或Gitee）中部署博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">简写为:hexo d</span><br></pre></td></tr></table></figure><hr><h2 id="第六节-访问网站"><a href="#第六节-访问网站" class="headerlink" title="第六节 访问网站"></a>第六节 访问网站</h2><p>部署在Github后的默认网站url为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://你的用户名.github.io/</span><br></pre></td></tr></table></figure><p>如果能成功访问，那么恭喜！你已经成功部署了一个属于自己的博客网站！</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
